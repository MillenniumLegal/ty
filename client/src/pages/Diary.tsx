import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { 
  Calendar, 
  Clock, 
  Phone, 
  Mail, 
  MessageSquare, 
  CheckCircle, 
  AlertCircle,
  Plus,
  Filter,
  Search,
  User,
  Target,
  Play,
  Pause,
  Archive,
  Edit,
  X
} from 'lucide-react';

interface DiaryTask {
  id: string;
  leadId: string;
  leadName: string;
  leadPhone: string;
  leadEmail: string;
  taskType: 'Call' | 'SMS' | 'Email' | 'Follow-up' | 'Quote' | 'Payment';
  title: string;
  description: string;
  scheduledAt: string;
  dueAt: string;
  status: 'Scheduled' | 'In Progress' | 'Completed' | 'Overdue' | 'Cancelled';
  priority: 'High' | 'Medium' | 'Low';
  agentId: string;
  agentName: string;
  outcomeCode?: string;
  attemptNumber: number;
  maxAttempts: number;
  businessHours: boolean;
  autoGenerated: boolean;
  createdAt: string;
  completedAt?: string;
  notes?: string;
}

export const Diary: React.FC = () => {
  const [searchParams] = useSearchParams();
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [filterStatus, setFilterStatus] = useState('All');
  const [filterType, setFilterType] = useState('All');
  const [filterAgent, setFilterAgent] = useState('All');
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState<DiaryTask | null>(null);
  const [showFilters, setShowFilters] = useState(false);

  // Handle URL parameters for actions
  useEffect(() => {
    const action = searchParams.get('action');
    if (action === 'schedule') {
      setShowCreateModal(true);
    }
  }, [searchParams]);

  // Mock data - replace with actual API calls
  const diaryTasks: DiaryTask[] = [
    {
      id: 'DT-001',
      leadId: 'L-001',
      leadName: 'John Smith',
      leadPhone: '+44 1704 773288',
      leadEmail: 'john.smith@email.com',
      taskType: 'Call',
      title: 'Initial Contact Call',
      description: 'First contact attempt for new lead',
      scheduledAt: '2024-01-15T09:00:00Z',
      dueAt: '2024-01-15T17:00:00Z',
      status: 'Scheduled',
      priority: 'High',
      agentId: 'agent1',
      agentName: 'Agent 1',
      outcomeCode: 'OC-001',
      attemptNumber: 1,
      maxAttempts: 5,
      businessHours: true,
      autoGenerated: true,
      createdAt: '2024-01-15T08:30:00Z'
    },
    {
      id: 'DT-002',
      leadId: 'L-002',
      leadName: 'Sarah Johnson',
      leadPhone: '+44 1704 773289',
      leadEmail: 'sarah.j@email.com',
      taskType: 'SMS',
      title: 'Follow-up SMS',
      description: 'Send SMS after no answer on call',
      scheduledAt: '2024-01-15T10:30:00Z',
      dueAt: '2024-01-15T18:00:00Z',
      status: 'Completed',
      priority: 'Medium',
      agentId: 'agent2',
      agentName: 'Agent 2',
      outcomeCode: 'OC-001',
      attemptNumber: 2,
      maxAttempts: 5,
      businessHours: true,
      autoGenerated: true,
      createdAt: '2024-01-15T09:15:00Z',
      completedAt: '2024-01-15T10:35:00Z',
      notes: 'SMS sent successfully, no reply received'
    },
    {
      id: 'DT-003',
      leadId: 'L-003',
      leadName: 'Mike Wilson',
      leadPhone: '+44 1704 773290',
      leadEmail: 'mike.w@email.com',
      taskType: 'Email',
      title: 'Quote Follow-up Email',
      description: 'Send follow-up email for quote sent 3 days ago',
      scheduledAt: '2024-01-15T11:00:00Z',
      dueAt: '2024-01-15T17:00:00Z',
      status: 'In Progress',
      priority: 'High',
      agentId: 'agent1',
      agentName: 'Agent 1',
      outcomeCode: 'OC-004',
      attemptNumber: 1,
      maxAttempts: 3,
      businessHours: true,
      autoGenerated: true,
      createdAt: '2024-01-15T10:45:00Z'
    },
    {
      id: 'DT-004',
      leadId: 'L-004',
      leadName: 'Emma Davis',
      leadPhone: '+44 1704 773291',
      leadEmail: 'emma.d@email.com',
      taskType: 'Call',
      title: 'Final Attempt Call',
      description: 'Final call attempt (5/5) before archiving',
      scheduledAt: '2024-01-15T14:00:00Z',
      dueAt: '2024-01-15T17:00:00Z',
      status: 'Overdue',
      priority: 'High',
      agentId: 'agent3',
      agentName: 'Agent 3',
      outcomeCode: 'OC-006',
      attemptNumber: 5,
      maxAttempts: 5,
      businessHours: true,
      autoGenerated: true,
      createdAt: '2024-01-15T13:30:00Z'
    },
    {
      id: 'DT-005',
      leadId: 'L-001',
      leadName: 'John Smith',
      leadPhone: '+44 1704 773288',
      leadEmail: 'john.smith@email.com',
      taskType: 'Quote',
      title: 'Prepare Quote',
      description: 'Create quote for interested lead',
      scheduledAt: '2024-01-16T09:00:00Z',
      dueAt: '2024-01-16T17:00:00Z',
      status: 'Scheduled',
      priority: 'Medium',
      agentId: 'agent1',
      agentName: 'Agent 1',
      outcomeCode: 'OC-002',
      attemptNumber: 0,
      maxAttempts: 0,
      businessHours: true,
      autoGenerated: false,
      createdAt: '2024-01-15T16:00:00Z'
    }
  ];

  const agents = [
    { id: 'agent1', name: 'Agent 1' },
    { id: 'agent2', name: 'Agent 2' },
    { id: 'agent3', name: 'Agent 3' },
    { id: 'all', name: 'All Agents' }
  ];

  const filteredTasks = diaryTasks.filter(task => {
    const matchesSearch = task.leadName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = filterStatus === 'All' || task.status === filterStatus;
    const matchesType = filterType === 'All' || task.taskType === filterType;
    const matchesAgent = filterAgent === 'All' || task.agentId === filterAgent;
    
    return matchesSearch && matchesStatus && matchesType && matchesAgent;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Scheduled': return 'bg-blue-100 text-blue-800';
      case 'In Progress': return 'bg-yellow-100 text-yellow-800';
      case 'Completed': return 'bg-green-100 text-green-800';
      case 'Overdue': return 'bg-red-100 text-red-800';
      case 'Cancelled': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'High': return 'bg-red-100 text-red-800';
      case 'Medium': return 'bg-yellow-100 text-yellow-800';
      case 'Low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'Call': return <Phone className="h-4 w-4" />;
      case 'SMS': return <MessageSquare className="h-4 w-4" />;
      case 'Email': return <Mail className="h-4 w-4" />;
      case 'Follow-up': return <Clock className="h-4 w-4" />;
      case 'Quote': return <Target className="h-4 w-4" />;
      case 'Payment': return <CheckCircle className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Scheduled': return <Clock className="h-4 w-4" />;
      case 'In Progress': return <Play className="h-4 w-4" />;
      case 'Completed': return <CheckCircle className="h-4 w-4" />;
      case 'Overdue': return <AlertCircle className="h-4 w-4" />;
      case 'Cancelled': return <Pause className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };

  const handleStartTask = (task: DiaryTask) => {
    console.log('Start task:', task.id);
    setSelectedTask(task);
  };

  const handleCompleteTask = (task: DiaryTask) => {
    console.log('Complete task:', task.id);
  };

  const handleRescheduleTask = (task: DiaryTask) => {
    console.log('Reschedule task:', task.id);
  };

  const handleCancelTask = (task: DiaryTask) => {
    console.log('Cancel task:', task.id);
  };

  const handleEditTask = (task: DiaryTask) => {
    setSelectedTask(task);
    setShowEditModal(true);
  };

  const handleDeleteTask = (task: DiaryTask) => {
    setSelectedTask(task);
    setShowDeleteModal(true);
  };

  const handleSaveTask = () => {
    console.log('Save new task:', newTask);
    setShowCreateModal(false);
    setNewTask({
      leadId: '',
      taskType: 'Call',
      title: '',
      description: '',
      scheduledAt: '',
      dueAt: '',
      priority: 'Medium',
      agentId: '',
      notes: ''
    });
  };

  const handleUpdateTask = () => {
    console.log('Update task:', selectedTask);
    setShowEditModal(false);
    setSelectedTask(null);
  };

  const handleConfirmDelete = () => {
    console.log('Delete task:', selectedTask?.id);
    setShowDeleteModal(false);
    setSelectedTask(null);
  };

  const handleToggleFilters = () => {
    setShowFilters(!showFilters);
  };

  const handleClearFilters = () => {
    setFilterStatus('All');
    setFilterType('All');
    setFilterAgent('All');
    setSearchTerm('');
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString('en-GB', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('en-GB', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getTaskStats = () => {
    const today = new Date().toISOString().split('T')[0];
    const todayTasks = diaryTasks.filter(task => 
      task.scheduledAt.startsWith(today)
    );
    
    return {
      total: diaryTasks.length,
      today: todayTasks.length,
      completed: diaryTasks.filter(t => t.status === 'Completed').length,
      overdue: diaryTasks.filter(t => t.status === 'Overdue').length,
      scheduled: diaryTasks.filter(t => t.status === 'Scheduled').length,
      inProgress: diaryTasks.filter(t => t.status === 'In Progress').length
    };
  };

  const stats = getTaskStats();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Diary & Tasks</h1>
          <p className="text-gray-600">Manage your daily tasks and schedule</p>
        </div>
        <div className="flex space-x-3">
          <button 
            className="btn-secondary flex items-center space-x-2"
            onClick={() => console.log('Switch to calendar view')}
          >
            <Calendar className="h-5 w-5" />
            <span>Calendar View</span>
          </button>
          <button 
            className="btn-primary flex items-center space-x-2"
            onClick={() => setShowCreateModal(true)}
          >
            <Plus className="h-5 w-5" />
            <span>New Task</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-blue-500">
              <Calendar className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Tasks</p>
              <p className="text-2xl font-bold text-gray-900">{stats.total}</p>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-green-500">
              <CheckCircle className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Completed</p>
              <p className="text-2xl font-bold text-gray-900">{stats.completed}</p>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-yellow-500">
              <Clock className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Scheduled</p>
              <p className="text-2xl font-bold text-gray-900">{stats.scheduled}</p>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-purple-500">
              <Play className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">In Progress</p>
              <p className="text-2xl font-bold text-gray-900">{stats.inProgress}</p>
            </div>
          </div>
        </div>
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-red-500">
              <AlertCircle className="h-6 w-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Overdue</p>
              <p className="text-2xl font-bold text-gray-900">{stats.overdue}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="card">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search tasks by lead name or description..."
                className="input-field pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          <div className="flex gap-2">
            <select 
              className="input-field"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <option value="All">All Status</option>
              <option value="Scheduled">Scheduled</option>
              <option value="In Progress">In Progress</option>
              <option value="Completed">Completed</option>
              <option value="Overdue">Overdue</option>
              <option value="Cancelled">Cancelled</option>
            </select>
            <select 
              className="input-field"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
            >
              <option value="All">All Types</option>
              <option value="Call">Call</option>
              <option value="SMS">SMS</option>
              <option value="Email">Email</option>
              <option value="Follow-up">Follow-up</option>
              <option value="Quote">Quote</option>
              <option value="Payment">Payment</option>
            </select>
            <select 
              className="input-field"
              value={filterAgent}
              onChange={(e) => setFilterAgent(e.target.value)}
            >
              <option value="All">All Agents</option>
              {agents.map(agent => (
                <option key={agent.id} value={agent.id}>
                  {agent.name}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Tasks List */}
      <div className="space-y-4">
        {filteredTasks.map((task) => (
          <div key={task.id} className="card">
            <div className="flex items-start justify-between">
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                    {getTypeIcon(task.taskType)}
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-1">
                    <h3 className="text-lg font-medium text-gray-900">{task.title}</h3>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                      {task.status}
                    </span>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(task.priority)}`}>
                      {task.priority}
                    </span>
                    {task.autoGenerated && (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        Auto
                      </span>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{task.description}</p>
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <div className="flex items-center space-x-1">
                      <User className="h-4 w-4" />
                      <span>{task.leadName}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Phone className="h-4 w-4" />
                      <span>{task.leadPhone}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Clock className="h-4 w-4" />
                      <span>{formatDateTime(task.scheduledAt)}</span>
                    </div>
                    {task.attemptNumber > 0 && (
                      <div className="flex items-center space-x-1">
                        <Target className="h-4 w-4" />
                        <span>{task.attemptNumber}/{task.maxAttempts} attempts</span>
                      </div>
                    )}
                  </div>
                  {task.notes && (
                    <div className="mt-2 text-sm text-gray-700 bg-gray-50 p-2 rounded">
                      {task.notes}
                    </div>
                  )}
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {task.status === 'Scheduled' && (
                  <>
                    <button 
                      className="btn-primary text-sm"
                      onClick={() => handleStartTask(task)}
                    >
                      Start
                    </button>
                    <button 
                      className="btn-secondary text-sm"
                      onClick={() => handleRescheduleTask(task)}
                    >
                      Reschedule
                    </button>
                    <button 
                      className="btn-danger text-sm"
                      onClick={() => handleCancelTask(task)}
                    >
                      Cancel
                    </button>
                  </>
                )}
                {task.status === 'In Progress' && (
                  <button 
                    className="btn-success text-sm"
                    onClick={() => handleCompleteTask(task)}
                  >
                    Complete
                  </button>
                )}
                {task.status === 'Completed' && (
                  <div className="flex items-center space-x-1 text-green-600">
                    <CheckCircle className="h-4 w-4" />
                    <span className="text-sm">Completed</span>
                  </div>
                )}
                {task.status === 'Overdue' && (
                  <div className="flex items-center space-x-1 text-red-600">
                    <AlertCircle className="h-4 w-4" />
                    <span className="text-sm">Overdue</span>
                  </div>
                )}
                <div className="flex items-center space-x-2 ml-4">
                  <button 
                    className="text-gray-400 hover:text-gray-600" 
                    title="Edit Task"
                    onClick={() => handleEditTask(task)}
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button 
                    className="text-gray-400 hover:text-red-600" 
                    title="Delete Task"
                    onClick={() => handleDeleteTask(task)}
                  >
                    <Archive className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Create Task Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Create New Task</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Task Type
                </label>
                <select className="input-field">
                  <option value="Call">Call</option>
                  <option value="SMS">SMS</option>
                  <option value="Email">Email</option>
                  <option value="Follow-up">Follow-up</option>
                  <option value="Quote">Quote</option>
                  <option value="Payment">Payment</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Title
                </label>
                <input 
                  type="text" 
                  className="input-field"
                  placeholder="Task title"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Description
                </label>
                <textarea 
                  className="input-field"
                  rows={3}
                  placeholder="Task description"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Scheduled Date
                  </label>
                  <input 
                    type="datetime-local" 
                    className="input-field"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Priority
                  </label>
                  <select className="input-field">
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                  </select>
                </div>
              </div>
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <button 
                className="btn-secondary"
                onClick={() => setShowCreateModal(false)}
              >
                Cancel
              </button>
              <button 
                className="btn-primary"
                onClick={handleSaveTask}
              >
                Create Task
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Task Modal */}
      {showEditModal && selectedTask && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Edit Task</h3>
              <button 
                className="text-gray-400 hover:text-gray-600"
                onClick={() => setShowEditModal(false)}
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Task Title</label>
                <input
                  type="text"
                  className="input-field"
                  defaultValue={selectedTask.title}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea
                  className="input-field"
                  rows={3}
                  defaultValue={selectedTask.description}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                  <select className="input-field" defaultValue={selectedTask.priority}>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select className="input-field" defaultValue={selectedTask.status}>
                    <option value="Scheduled">Scheduled</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button 
                className="btn-secondary"
                onClick={() => setShowEditModal(false)}
              >
                Cancel
              </button>
              <button 
                className="btn-primary"
                onClick={handleUpdateTask}
              >
                Update Task
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Task Modal */}
      {showDeleteModal && selectedTask && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Delete Task</h3>
              <button 
                className="text-gray-400 hover:text-gray-600"
                onClick={() => setShowDeleteModal(false)}
              >
                <X className="h-6 w-6" />
              </button>
            </div>
            
            <div className="mb-6">
              <p className="text-gray-600 mb-4">
                Are you sure you want to delete the task "{selectedTask.title}"?
              </p>
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm text-red-800">
                  <strong>Warning:</strong> This action cannot be undone. The task will be permanently removed.
                </p>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3">
              <button 
                className="btn-secondary"
                onClick={() => setShowDeleteModal(false)}
              >
                Cancel
              </button>
              <button 
                className="btn-danger"
                onClick={handleConfirmDelete}
              >
                Delete Task
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
